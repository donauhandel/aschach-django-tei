# generated by appcreator
from django.db.models import Q
from dal import autocomplete
from . models import *


class AngabeAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Angabe.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(id__icontains=self.q)
            )
        return qs


class FahrzeugAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Fahrzeug.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(id__icontains=self.q)
            )
        return qs


class FirmaAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Firma.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(name__icontains=self.q)
            )
        return qs


class LadungAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Ladung.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(id__icontains=self.q)
            )
        return qs


class NachNameAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = NachName.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(name__icontains=self.q)
            )
        return qs


class OrtAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Ort.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(name__icontains=self.q)
            )
        return qs


class PersonAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Person.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(id__icontains=self.q)
            )
        return qs


class PersonAngabeAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = PersonAngabe.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(id__icontains=self.q)
            )
        return qs


class PersonLadungAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = PersonLadung.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(id__icontains=self.q)
            )
        return qs


class PersonenBezeichnungAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = PersonenBezeichnung.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(bezeichnung__icontains=self.q)
            )
        return qs


class RegionAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Region.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(name__icontains=self.q)
            )
        return qs


class ScanAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Scan.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(datei_name__icontains=self.q)
            )
        return qs


class VorNameAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = VorName.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(name__icontains=self.q)
            )
        return qs


class WareAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Ware.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(name__icontains=self.q)
            )
        return qs


class WareLadungAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = WareLadung.objects.all()

        if self.q:
            qs = qs.filter(
                Q(legacy_id__icontains=self.q) |
                Q(id__icontains=self.q)
            )
        return qs


