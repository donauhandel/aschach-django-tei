# generated by appcreator
import django_filters
from dal import autocomplete

from vocabs.filters import generous_concept_filter
from vocabs.models import SkosConcept
from .models import (
    Angabe,
    Fahrzeug,
    Firma,
    Ladung,
    NachName,
    Ort,
    Person,
    PersonAngabe,
    PersonLadung,
    PersonenBezeichnung,
    Region,
    Scan,
    VorName,
    Ware,
    WareLadung,
)


class AngabeListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Angabe._meta.get_field("legacy_id").help_text,
        label=Angabe._meta.get_field("legacy_id").verbose_name,
    )
    datum_original = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Angabe._meta.get_field("datum_original").help_text,
        label=Angabe._meta.get_field("datum_original").verbose_name,
    )
    quelle = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Angabe._meta.get_field("quelle").help_text,
        label=Angabe._meta.get_field("quelle").verbose_name,
    )
    bildnummern = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Angabe._meta.get_field("bildnummern").help_text,
        label=Angabe._meta.get_field("bildnummern").verbose_name,
    )
    bemerkungen = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Angabe._meta.get_field("bemerkungen").help_text,
        label=Angabe._meta.get_field("bemerkungen").verbose_name,
    )
    fahrzeug = django_filters.ModelMultipleChoiceFilter(
        queryset=Fahrzeug.objects.all(),
        help_text=Angabe._meta.get_field("fahrzeug").help_text,
        label=Angabe._meta.get_field("fahrzeug").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:fahrzeug-autocomplete",
        ),
    )
    ladung = django_filters.ModelMultipleChoiceFilter(
        queryset=Ladung.objects.all(),
        help_text=Angabe._meta.get_field("ladung").help_text,
        label=Angabe._meta.get_field("ladung").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:ladung-autocomplete",
        ),
    )
    passagiere = django_filters.ModelMultipleChoiceFilter(
        queryset=Person.objects.all(),
        help_text=Angabe._meta.get_field("passagiere").help_text,
        label=Angabe._meta.get_field("passagiere").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:person-autocomplete",
        ),
    )
    scan = django_filters.ModelMultipleChoiceFilter(
        queryset=Scan.objects.all(),
        help_text=Angabe._meta.get_field("scan").help_text,
        label=Angabe._meta.get_field("scan").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:scan-autocomplete",
        ),
    )

    class Meta:
        model = Angabe
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "datum_original",
            "datum",
            "quelle",
            "bildnummern",
            "bemerkungen",
            "eiskalt",
            "fahrzeug",
            "hochwasser",
            "ladung",
            "nichts",
            "passagiere",
            "scan",
        ]


class FahrzeugListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Fahrzeug._meta.get_field("legacy_id").help_text,
        label=Fahrzeug._meta.get_field("legacy_id").verbose_name,
    )
    person = django_filters.ModelMultipleChoiceFilter(
        queryset=Person.objects.all(),
        help_text=Fahrzeug._meta.get_field("person").help_text,
        label=Fahrzeug._meta.get_field("person").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:person-autocomplete",
        ),
    )
    herkunft = django_filters.ModelMultipleChoiceFilter(
        queryset=Ort.objects.all(),
        help_text=Fahrzeug._meta.get_field("herkunft").help_text,
        label=Fahrzeug._meta.get_field("herkunft").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:ort-autocomplete",
        ),
    )
    region = django_filters.ModelMultipleChoiceFilter(
        queryset=Ort.objects.all(),
        help_text=Fahrzeug._meta.get_field("region").help_text,
        label=Fahrzeug._meta.get_field("region").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:ort-autocomplete",
        ),
    )
    fahrtrichtung = django_filters.ModelMultipleChoiceFilter(
        queryset=SkosConcept.objects.filter(collection__name="fahrtrichtung"),
        help_text=Fahrzeug._meta.get_field("fahrtrichtung").help_text,
        label=Fahrzeug._meta.get_field("fahrtrichtung").verbose_name,
        method=generous_concept_filter,
        widget=autocomplete.Select2Multiple(
            url="/vocabs-ac/specific-concept-ac/fahrtrichtung",
            attrs={
                "data-placeholder": "Autocomplete ...",
                "data-minimum-input-length": 2,
            },
        ),
    )
    bemerkungen = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Fahrzeug._meta.get_field("bemerkungen").help_text,
        label=Fahrzeug._meta.get_field("bemerkungen").verbose_name,
    )
    zielort = django_filters.ModelMultipleChoiceFilter(
        queryset=Ort.objects.all(),
        help_text=Fahrzeug._meta.get_field("zielort").help_text,
        label=Fahrzeug._meta.get_field("zielort").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:ort-autocomplete",
        ),
    )

    class Meta:
        model = Fahrzeug
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "person",
            "herkunft",
            "region",
            "fahrtrichtung",
            "bemerkungen",
            "anzahl_pferde",
            "hohenau",
            "zielort",
            "zurueck",
        ]


class FirmaListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Firma._meta.get_field("legacy_id").help_text,
        label=Firma._meta.get_field("legacy_id").verbose_name,
    )
    name = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Firma._meta.get_field("name").help_text,
        label=Firma._meta.get_field("name").verbose_name,
    )
    bemerkungen = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Firma._meta.get_field("bemerkungen").help_text,
        label=Firma._meta.get_field("bemerkungen").verbose_name,
    )
    name_orig = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Firma._meta.get_field("name_orig").help_text,
        label=Firma._meta.get_field("name_orig").verbose_name,
    )

    class Meta:
        model = Firma
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "name",
            "bemerkungen",
            "name_orig",
        ]


class LadungListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Ladung._meta.get_field("legacy_id").help_text,
        label=Ladung._meta.get_field("legacy_id").verbose_name,
    )
    bemerkungen = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Ladung._meta.get_field("bemerkungen").help_text,
        label=Ladung._meta.get_field("bemerkungen").verbose_name,
    )
    personen = django_filters.ModelMultipleChoiceFilter(
        queryset=Person.objects.all(),
        help_text=Ladung._meta.get_field("personen").help_text,
        label=Ladung._meta.get_field("personen").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:person-autocomplete",
        ),
    )
    waren = django_filters.ModelMultipleChoiceFilter(
        queryset=Ware.objects.all(),
        help_text=Ladung._meta.get_field("waren").help_text,
        label=Ladung._meta.get_field("waren").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:ware-autocomplete",
        ),
    )
    zielort = django_filters.ModelMultipleChoiceFilter(
        queryset=Ort.objects.all(),
        help_text=Ladung._meta.get_field("zielort").help_text,
        label=Ladung._meta.get_field("zielort").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:ort-autocomplete",
        ),
    )

    class Meta:
        model = Ladung
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "bemerkungen",
            "dreilingsgeld",
            "kammergut",
            "mautbefreiung",
            "mautbefreiung_all",
            "niederlage",
            "passbrief",
            "per_kommission",
            "per_schiffmeister",
            "per_schiffukgut",
            "personen",
            "waren",
            "weitertransport",
            "zielort",
        ]


class NachNameListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=NachName._meta.get_field("legacy_id").help_text,
        label=NachName._meta.get_field("legacy_id").verbose_name,
    )
    name = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=NachName._meta.get_field("name").help_text,
        label=NachName._meta.get_field("name").verbose_name,
    )
    bemerkungen = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=NachName._meta.get_field("bemerkungen").help_text,
        label=NachName._meta.get_field("bemerkungen").verbose_name,
    )
    name_orig = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=NachName._meta.get_field("name_orig").help_text,
        label=NachName._meta.get_field("name_orig").verbose_name,
    )

    class Meta:
        model = NachName
        fields = [
            "id",
            "legacy_id",
            "name",
            "bemerkungen",
            "name_orig",
        ]


class OrtListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Ort._meta.get_field("legacy_id").help_text,
        label=Ort._meta.get_field("legacy_id").verbose_name,
    )
    name = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Ort._meta.get_field("name").help_text,
        label=Ort._meta.get_field("name").verbose_name,
    )
    bemerkungen = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Ort._meta.get_field("bemerkungen").help_text,
        label=Ort._meta.get_field("bemerkungen").verbose_name,
    )
    literatur = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Ort._meta.get_field("literatur").help_text,
        label=Ort._meta.get_field("literatur").verbose_name,
    )
    name_orig = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Ort._meta.get_field("name_orig").help_text,
        label=Ort._meta.get_field("name_orig").verbose_name,
    )
    region = django_filters.ModelMultipleChoiceFilter(
        queryset=Region.objects.all(),
        help_text=Ort._meta.get_field("region").help_text,
        label=Ort._meta.get_field("region").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:region-autocomplete",
        ),
    )

    class Meta:
        model = Ort
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "name",
            "bemerkungen",
            "literatur",
            "name_orig",
            "region",
        ]


class PersonListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Person._meta.get_field("legacy_id").help_text,
        label=Person._meta.get_field("legacy_id").verbose_name,
    )
    nachname = django_filters.ModelMultipleChoiceFilter(
        queryset=NachName.objects.all(),
        help_text=Person._meta.get_field("nachname").help_text,
        label=Person._meta.get_field("nachname").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:nachname-autocomplete",
        ),
    )
    vorname = django_filters.ModelMultipleChoiceFilter(
        queryset=VorName.objects.all(),
        help_text=Person._meta.get_field("vorname").help_text,
        label=Person._meta.get_field("vorname").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:vorname-autocomplete",
        ),
    )
    firma = django_filters.ModelMultipleChoiceFilter(
        queryset=Firma.objects.all(),
        help_text=Person._meta.get_field("firma").help_text,
        label=Person._meta.get_field("firma").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:firma-autocomplete",
        ),
    )
    bezeichnung = django_filters.ModelMultipleChoiceFilter(
        queryset=PersonenBezeichnung.objects.all(),
        help_text=Person._meta.get_field("bezeichnung").help_text,
        label=Person._meta.get_field("bezeichnung").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:personenbezeichnung-autocomplete",
        ),
    )
    bemerkungen = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Person._meta.get_field("bemerkungen").help_text,
        label=Person._meta.get_field("bemerkungen").verbose_name,
    )
    herkunft = django_filters.ModelMultipleChoiceFilter(
        queryset=Ort.objects.all(),
        help_text=Person._meta.get_field("herkunft").help_text,
        label=Person._meta.get_field("herkunft").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:ort-autocomplete",
        ),
    )
    verknuepft = django_filters.ModelMultipleChoiceFilter(
        queryset=Person.objects.all(),
        help_text=Person._meta.get_field("verknuepft").help_text,
        label=Person._meta.get_field("verknuepft").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:person-autocomplete",
        ),
    )

    class Meta:
        model = Person
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "nachname",
            "vorname",
            "firma",
            "bezeichnung",
            "bemerkungen",
            "weiblich",
            "herkunft",
            "jude",
            "verknuepft",
        ]


class PersonAngabeListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=PersonAngabe._meta.get_field("legacy_id").help_text,
        label=PersonAngabe._meta.get_field("legacy_id").verbose_name,
    )
    person = django_filters.ModelMultipleChoiceFilter(
        queryset=Person.objects.all(),
        help_text=PersonAngabe._meta.get_field("person").help_text,
        label=PersonAngabe._meta.get_field("person").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:person-autocomplete",
        ),
    )
    angabe = django_filters.ModelMultipleChoiceFilter(
        queryset=Angabe.objects.all(),
        help_text=PersonAngabe._meta.get_field("angabe").help_text,
        label=PersonAngabe._meta.get_field("angabe").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:angabe-autocomplete",
        ),
    )
    bemerkungen = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=PersonAngabe._meta.get_field("bemerkungen").help_text,
        label=PersonAngabe._meta.get_field("bemerkungen").verbose_name,
    )
    zielort = django_filters.ModelMultipleChoiceFilter(
        queryset=Ort.objects.all(),
        help_text=PersonAngabe._meta.get_field("zielort").help_text,
        label=PersonAngabe._meta.get_field("zielort").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:ort-autocomplete",
        ),
    )

    class Meta:
        model = PersonAngabe
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "person",
            "angabe",
            "bemerkungen",
            "judenleibmaut",
            "judenleibmaut_fl",
            "judenleibmaut_s",
            "judenleibmaut_d",
            "zielort",
        ]


class PersonLadungListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=PersonLadung._meta.get_field("legacy_id").help_text,
        label=PersonLadung._meta.get_field("legacy_id").verbose_name,
    )
    person = django_filters.ModelMultipleChoiceFilter(
        queryset=Person.objects.all(),
        help_text=PersonLadung._meta.get_field("person").help_text,
        label=PersonLadung._meta.get_field("person").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:person-autocomplete",
        ),
    )
    ladung = django_filters.ModelMultipleChoiceFilter(
        queryset=Ladung.objects.all(),
        help_text=PersonLadung._meta.get_field("ladung").help_text,
        label=PersonLadung._meta.get_field("ladung").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:ladung-autocomplete",
        ),
    )

    class Meta:
        model = PersonLadung
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "person",
            "ladung",
            "person_an",
            "person_einem_dem",
            "person_per",
            "person_pro_fur",
            "person_zugeordnet",
        ]


class PersonenBezeichnungListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=PersonenBezeichnung._meta.get_field("legacy_id").help_text,
        label=PersonenBezeichnung._meta.get_field("legacy_id").verbose_name,
    )
    bezeichnung = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=PersonenBezeichnung._meta.get_field("bezeichnung").help_text,
        label=PersonenBezeichnung._meta.get_field("bezeichnung").verbose_name,
    )
    bemerkungen = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=PersonenBezeichnung._meta.get_field("bemerkungen").help_text,
        label=PersonenBezeichnung._meta.get_field("bemerkungen").verbose_name,
    )

    class Meta:
        model = PersonenBezeichnung
        fields = [
            "id",
            "legacy_id",
            "legacy_py",
            "bezeichnung",
            "bemerkungen",
        ]


class RegionListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Region._meta.get_field("legacy_id").help_text,
        label=Region._meta.get_field("legacy_id").verbose_name,
    )
    name = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Region._meta.get_field("name").help_text,
        label=Region._meta.get_field("name").verbose_name,
    )

    class Meta:
        model = Region
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "name",
        ]


class ScanListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Scan._meta.get_field("legacy_id").help_text,
        label=Scan._meta.get_field("legacy_id").verbose_name,
    )
    datei_name = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Scan._meta.get_field("datei_name").help_text,
        label=Scan._meta.get_field("datei_name").verbose_name,
    )
    ordner = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Scan._meta.get_field("ordner").help_text,
        label=Scan._meta.get_field("ordner").verbose_name,
    )
    phaidra_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Scan._meta.get_field("phaidra_id").help_text,
        label=Scan._meta.get_field("phaidra_id").verbose_name,
    )

    class Meta:
        model = Scan
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "datei_name",
            "ordner",
            "phaidra_id",
        ]


class VorNameListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=VorName._meta.get_field("legacy_id").help_text,
        label=VorName._meta.get_field("legacy_id").verbose_name,
    )
    name = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=VorName._meta.get_field("name").help_text,
        label=VorName._meta.get_field("name").verbose_name,
    )
    bemerkungen = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=VorName._meta.get_field("bemerkungen").help_text,
        label=VorName._meta.get_field("bemerkungen").verbose_name,
    )

    class Meta:
        model = VorName
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "name",
            "bemerkungen",
        ]


class WareListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Ware._meta.get_field("legacy_id").help_text,
        label=Ware._meta.get_field("legacy_id").verbose_name,
    )
    name = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Ware._meta.get_field("name").help_text,
        label=Ware._meta.get_field("name").verbose_name,
    )
    beschreibung = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Ware._meta.get_field("beschreibung").help_text,
        label=Ware._meta.get_field("beschreibung").verbose_name,
    )
    name_orig = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=Ware._meta.get_field("name_orig").help_text,
        label=Ware._meta.get_field("name_orig").verbose_name,
    )

    class Meta:
        model = Ware
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "name",
            "beschreibung",
            "name_orig",
        ]


class WareLadungListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=WareLadung._meta.get_field("legacy_id").help_text,
        label=WareLadung._meta.get_field("legacy_id").verbose_name,
    )
    ladung = django_filters.ModelMultipleChoiceFilter(
        queryset=Ladung.objects.all(),
        help_text=WareLadung._meta.get_field("ladung").help_text,
        label=WareLadung._meta.get_field("ladung").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:ladung-autocomplete",
        ),
    )
    ware = django_filters.ModelMultipleChoiceFilter(
        queryset=Ware.objects.all(),
        help_text=WareLadung._meta.get_field("ware").help_text,
        label=WareLadung._meta.get_field("ware").verbose_name,
        widget=autocomplete.Select2Multiple(
            url="aschach-ac:ware-autocomplete",
        ),
    )
    anzahl = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=WareLadung._meta.get_field("anzahl").help_text,
        label=WareLadung._meta.get_field("anzahl").verbose_name,
    )
    anzahl_original = django_filters.CharFilter(
        lookup_expr="icontains",
        help_text=WareLadung._meta.get_field("anzahl_original").help_text,
        label=WareLadung._meta.get_field("anzahl_original").verbose_name,
    )
    einheit = django_filters.ModelMultipleChoiceFilter(
        queryset=SkosConcept.objects.filter(collection__name="einheit"),
        help_text=WareLadung._meta.get_field("einheit").help_text,
        label=WareLadung._meta.get_field("einheit").verbose_name,
        method=generous_concept_filter,
        widget=autocomplete.Select2Multiple(
            url="/vocabs-ac/specific-concept-ac/einheit",
            attrs={
                "data-placeholder": "Autocomplete ...",
                "data-minimum-input-length": 2,
            },
        ),
    )

    class Meta:
        model = WareLadung
        fields = [
            "id",
            "legacy_id",
            "legacy_pk",
            "ladung",
            "ware",
            "anzahl",
            "anzahl_original",
            "einheit",
            "maut_fl",
            "maut_s",
            "maut_d",
            "waren_order",
        ]
